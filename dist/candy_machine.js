"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCandyMachine = exports.Statechart = void 0;
const xstate_1 = require("xstate");
const prompt_sync_1 = __importDefault(require("prompt-sync"));
const prompt = (0, prompt_sync_1.default)();
var State;
(function (State) {
    State["NO_COIN"] = "NO_COIN";
    State["INVALID_COIN"] = "INVALID_COIN";
    State["VALID_COIN"] = "VALID_COIN";
    State["SLOT_CLOSED"] = "SLOT_CLOSED";
    State["SHUTDOWN"] = "SHUTDOWN";
})(State || (State = {}));
var Event;
(function (Event) {
    Event["HALF_TURN"] = "HALF_TURN";
    Event["ADD_COIN"] = "ADD_COIN";
    Event["REMOVE_COIN"] = "REMOVE_COIN";
    Event["SHUTDOWN"] = "SHUTDOWN";
    Event["TAMPER"] = "TAMPER";
})(Event || (Event = {}));
var Action;
(function (Action) {
    Action["DISPENSE_CANDY"] = "DISPENSE_CANDY";
    Action["RECORD_COIN"] = "RECORD_COIN";
    Action["CLEAR_COIN"] = "CLEAR_COIN";
    Action["RECORD_SALE"] = "RECORD_SALE";
    Action["LOG_SALES"] = "LOG_SALES";
    Action["SHUT_DOWN"] = "SHUT_DOWN";
    Action["INVALID_ACTION"] = "INVALID_ACTION";
})(Action || (Action = {}));
var CandyColour;
(function (CandyColour) {
    CandyColour["RED"] = "red";
    CandyColour["GREEN"] = "green";
    CandyColour["BLUE"] = "blue";
})(CandyColour || (CandyColour = {}));
var CandyQuality;
(function (CandyQuality) {
    CandyQuality["GREAT"] = "tasty";
    CandyQuality["REGULAR"] = "basic";
    CandyQuality["DISGUSTING"] = "disgusting";
})(CandyQuality || (CandyQuality = {}));
const Schema = {
    context: {},
    events: {},
};
const ValidCoins = [50, 100, 200];
const checkHasCoin = (currentCoinValue) => currentCoinValue !== 0;
const checkIsValidCoin = (currentCoinValue) => ValidCoins.includes(currentCoinValue);
const Guards = {
    [State.VALID_COIN]: (context) => checkHasCoin(context.currentCoinValue) && checkIsValidCoin(context.currentCoinValue),
    [State.INVALID_COIN]: (context) => checkHasCoin(context.currentCoinValue) && !checkIsValidCoin(context.currentCoinValue),
};
const States = {
    [State.NO_COIN]: {
        always: [
            {
                target: State.VALID_COIN,
                cond: Guards[State.VALID_COIN],
            },
            {
                target: State.INVALID_COIN,
                cond: Guards[State.INVALID_COIN],
            },
        ],
        on: {
            [Event.HALF_TURN]: State.SLOT_CLOSED,
            [Event.ADD_COIN]: { actions: Action.RECORD_COIN },
            [Event.SHUTDOWN]: State.SHUTDOWN,
            [Event.TAMPER]: { actions: Action.INVALID_ACTION },
        },
    },
    [State.INVALID_COIN]: {
        on: {
            [Event.REMOVE_COIN]: {
                target: State.NO_COIN,
                actions: Action.CLEAR_COIN,
            },
            [Event.TAMPER]: { actions: Action.INVALID_ACTION },
        },
    },
    [State.VALID_COIN]: {
        on: {
            [Event.HALF_TURN]: {
                target: State.SLOT_CLOSED,
                actions: [Action.RECORD_SALE, Action.DISPENSE_CANDY, Action.CLEAR_COIN],
            },
            [Event.REMOVE_COIN]: {
                target: State.NO_COIN,
                actions: Action.CLEAR_COIN,
            },
            [Event.TAMPER]: { actions: Action.INVALID_ACTION },
        },
    },
    [State.SLOT_CLOSED]: {
        on: {
            [Event.HALF_TURN]: State.NO_COIN,
            [Event.TAMPER]: { actions: Action.INVALID_ACTION },
        },
    },
    [State.SHUTDOWN]: {
        type: 'final',
        entry: [Action.LOG_SALES, Action.SHUT_DOWN],
        on: {
            '*': { actions: Action.INVALID_ACTION },
        },
    },
};
const Actions = {
    [Action.RECORD_COIN]: (0, xstate_1.assign)({
        currentCoinValue: (_, event) => {
            switch (event.type) {
                case Event.ADD_COIN:
                    return event.value;
                default:
                    throw new String(event.type);
            }
        },
    }),
    [Action.CLEAR_COIN]: (0, xstate_1.assign)({
        currentCoinValue: () => 0,
    }),
    [Action.RECORD_SALE]: (0, xstate_1.assign)({
        totalValue: (context) => context.totalValue + context.currentCoinValue,
        numSales: (context) => context.numSales + 1,
    }),
    [Action.LOG_SALES]: (context) => console.log(`--- Day's sales: $${(context.totalValue / 100).toFixed(2)} earned from ${context.numSales} sales. Last sale dated ${context.lastDispensedAt} ---`),
    [Action.DISPENSE_CANDY]: () => {
        const randColourNum = Math.random() * 3;
        const randQualityNum = Math.random() * 3;
        const candyColour = randColourNum < 1
            ? CandyColour.RED
            : randColourNum < 2
                ? CandyColour.GREEN
                : CandyColour.BLUE;
        const candyQuality = randQualityNum < 1
            ? CandyQuality.DISGUSTING
            : randColourNum < 2
                ? CandyQuality.GREAT
                : CandyQuality.REGULAR;
        console.log(`--- A ${candyQuality} ${candyColour} candy has been dispensed, enjoy! ---`);
    },
    [Action.SHUT_DOWN]: () => console.log('--- Candy machine is shutting down for the day ---'),
    [Action.INVALID_ACTION]: (_, event) => {
        throw new String(event.type);
    },
};
exports.Statechart = (0, xstate_1.createMachine)({
    predictableActionArguments: true,
    initial: State.NO_COIN,
    states: States,
    schema: Schema,
    context: {
        currentCoinValue: 0,
        totalValue: 0,
        numSales: 0,
        lastDispensedAt: new Date(),
    },
    entry: [() => console.log('--- Candy machine is open for business ---')],
}, {
    actions: Actions,
    guards: Guards,
});
const INPUT_MAPPING = {
    a: Event.ADD_COIN,
    b: Event.HALF_TURN,
    c: Event.REMOVE_COIN,
    d: Event.SHUTDOWN,
    e: Event.TAMPER,
};
function runCandyMachine() {
    let currState;
    try {
        const candyMachine = (0, xstate_1.interpret)(exports.Statechart).onTransition((state) => {
            currState = state.value;
            console.log('Current state:', state.value);
        });
        candyMachine.start();
        while (currState !== State.SHUTDOWN) {
            console.log('What action would you like to perform?');
            console.log('  a) Insert a coin');
            console.log('  b) Rotate the knob by half a turn');
            console.log('  c) Remove a coin');
            console.log('  d) Turn off the candy machine');
            console.log('  e) Tamper with the candy machine to try and get free candy');
            const eventInput = prompt('> ');
            console.log();
            if (!eventInput || !(eventInput in INPUT_MAPPING)) {
                continue;
            }
            const validInput = eventInput;
            const event = INPUT_MAPPING[validInput];
            if (event === Event.ADD_COIN) {
                console.log('What dollar value coin would you like to insert?');
                const valueInput = prompt('> $');
                console.log();
                candyMachine.send({
                    type: Event.ADD_COIN,
                    value: Number(valueInput) * 100,
                });
            }
            else {
                candyMachine.send({ type: event });
            }
        }
        candyMachine.stop();
    }
    catch (e) {
        console.log(`Uh oh, someone broke the candy machine: ${currState} + ${e}`);
    }
}
exports.runCandyMachine = runCandyMachine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZHlfbWFjaGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jYW5keV9tYWNoaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG1DQVNnQjtBQUNoQiw4REFBcUM7QUFDckMsTUFBTSxNQUFNLEdBQUcsSUFBQSxxQkFBVSxHQUFFLENBQUM7QUFHNUIsSUFBSyxLQU1KO0FBTkQsV0FBSyxLQUFLO0lBQ1IsNEJBQW1CLENBQUE7SUFDbkIsc0NBQTZCLENBQUE7SUFDN0Isa0NBQXlCLENBQUE7SUFDekIsb0NBQTJCLENBQUE7SUFDM0IsOEJBQXFCLENBQUE7QUFDdkIsQ0FBQyxFQU5JLEtBQUssS0FBTCxLQUFLLFFBTVQ7QUFHRCxJQUFLLEtBTUo7QUFORCxXQUFLLEtBQUs7SUFDUixnQ0FBdUIsQ0FBQTtJQUN2Qiw4QkFBcUIsQ0FBQTtJQUNyQixvQ0FBMkIsQ0FBQTtJQUMzQiw4QkFBcUIsQ0FBQTtJQUNyQiwwQkFBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTkksS0FBSyxLQUFMLEtBQUssUUFNVDtBQU1ELElBQUssTUFRSjtBQVJELFdBQUssTUFBTTtJQUNULDJDQUFpQyxDQUFBO0lBQ2pDLHFDQUEyQixDQUFBO0lBQzNCLG1DQUF5QixDQUFBO0lBQ3pCLHFDQUEyQixDQUFBO0lBQzNCLGlDQUF1QixDQUFBO0lBQ3ZCLGlDQUF1QixDQUFBO0lBQ3ZCLDJDQUFpQyxDQUFBO0FBQ25DLENBQUMsRUFSSSxNQUFNLEtBQU4sTUFBTSxRQVFWO0FBR0QsSUFBSyxXQUlKO0FBSkQsV0FBSyxXQUFXO0lBQ2QsMEJBQVcsQ0FBQTtJQUNYLDhCQUFlLENBQUE7SUFDZiw0QkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQUpJLFdBQVcsS0FBWCxXQUFXLFFBSWY7QUFHRCxJQUFLLFlBSUo7QUFKRCxXQUFLLFlBQVk7SUFDZiwrQkFBZSxDQUFBO0lBQ2YsaUNBQWlCLENBQUE7SUFDakIseUNBQXlCLENBQUE7QUFDM0IsQ0FBQyxFQUpJ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